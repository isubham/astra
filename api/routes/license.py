import os
from flask import request, jsonify
from app import db
from utility import Utility
from models import License, license_schema
from sqlalchemy.exc import IntegrityError
from . import routes
from resources import Resources
from cryptography.fernet import InvalidToken

# will be exclusively generated by @pitavya
@routes.route('/license/create/', methods=['POST'])
def create_license():
    license_json = request.json
    user_email, app_id, validity = license_json["user_email"], os.environ["ASTRA_CODE"], license_json["validity"]

    try:
        Utility.parseDateYMD(validity)
    except Exception as e:
        return jsonify(Resources.license_invalid_validity())

    license_exist = db.session.query(License).filter_by(user_email=user_email).first()

    if not license_exist is None:
        return jsonify(Resources.error_license_exist())

    try:
        new_license = License(user_email, app_id, validity)
        db.session.add(new_license)
        db.session.commit()
        return license_schema.jsonify(new_license)
    except IntegrityError as e:
        return jsonify({"message" : "user don't exist"})



@routes.route('/license/validate/', methods=['POST'])
def validate_license():
    license_json = request.json
    app_code, license_text, user_email = os.environ["ASTRA_CODE"], license_json["license_key"], license_json["user_email"]

    result = db.session.query(License).filter_by(user_email=user_email).first()
    if not result is None:
        try:
            return result.license_valid(user_email, app_code, license_text)
        except InvalidToken as i:
            return jsonify(Resources.error_license_invalid())
    else:
        return jsonify(Resources.error_license_dont_exist())

